name: build

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

permissions:
  # Checkout repository
  contents: read
  # Push container images
  packages: write

jobs:

  integration-tests:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - run: |
          #!/bin/bash
          set -euo pipefail

          COMPOSE_FILE="integration-test-compose.yaml"

          # Build all images
          docker compose -f "$COMPOSE_FILE" build

          # Start postgres in detached mode
          docker compose -f "$COMPOSE_FILE" up -d glvd-postgres

          # Wait for postgres to be healthy
          echo "Waiting for glvd-postgres to be healthy..."
          until docker compose -f "$COMPOSE_FILE" exec -T glvd-postgres pg_isready -U glvd -d glvd; do
            sleep 2
          done

          # Run ingestion (waits for completion)
          docker compose -f "$COMPOSE_FILE" up --no-deps --abort-on-container-exit --exit-code-from ingestion ingestion
          INGESTION_EXIT_CODE=$?

          if [ $INGESTION_EXIT_CODE -ne 0 ]; then
            echo "Ingestion failed, skipping assert and shutting down."
            docker compose -f "$COMPOSE_FILE" down
            exit $INGESTION_EXIT_CODE
          fi

          # Run assert (waits for completion)
          docker compose -f "$COMPOSE_FILE" up --no-deps --abort-on-container-exit --exit-code-from assert assert
          ASSERT_EXIT_CODE=$?

          # Shut everything down
          docker compose -f "$COMPOSE_FILE" down

          exit $ASSERT_EXIT_CODE

  unit-tests:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - run: sudo apt-get update && sudo apt-get install -y python3-pytest python3-yaml python3-psycopg2
      
      - run: ./unit-test.sh

  build:
    runs-on: ubuntu-24.04

    env:
      IMAGE_NAME: ghcr.io/gardenlinux/triage
      IMAGE_TAG: latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install qemu dependency for multi-arch build
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static

      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.IMAGE_TAG }}
          platforms: linux/amd64, linux/arm64
          containerfiles: |
            ./src/Containerfile

      - name: Echo Outputs
        run: |
          echo "Image: ${{ steps.build_image.outputs.image }}"
          echo "Tags: ${{ steps.build_image.outputs.tags }}"
          echo "Tagged Image: ${{ steps.build_image.outputs.image-with-tag }}"

      - name: Check images created
        run: buildah images | grep '${{ env.IMAGE_NAME }}'

      - name: Check manifest
        run: |
          set -x
          buildah manifest inspect ${{ steps.build_image.outputs.image }}:${{ env.IMAGE_TAG }}

      - name: Push To ghcr.io
        id: push-to-ghcr
        if: ${{ github.event_name != 'pull_request' }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Print image details
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          echo "Image pushed to ${{ steps.push-to-ghcr.outputs.registry-paths }}"
          echo "Digest ${{ steps.push-to-ghcr.outputs.digest }}"
